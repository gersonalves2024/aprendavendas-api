// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
//
// Para executar a migração, use:
// npx prisma generate
// npx prisma migrate dev --name add_multiple_courses_transaction

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de usuário (vendedor, afiliado ou admin)
model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String
  ddd         String?   @db.VarChar(3)  // Código de área
  phone       String?   // Número do telefone
  role        Role      @default(SELLER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  students    Student[] // Relação com alunos cadastrados pelo usuário
  coupons     Coupon[]  // Relação com cupons (pode ter múltiplos)
  transactions Transaction[] // Relação com transações registradas pelo usuário
}

// Enum para tipos de usuário
enum Role {
  ADMIN
  SELLER
  AFFILIATE  // Perfil de afiliado
}

// Modo de aplicação do cupom
enum CouponApplicationMode {
  GENERAL    // Aplicação por modalidade e valor base
  SPECIFIC   // Aplicação específica por curso
}

// Tabela de domínio para modalidades de curso (Formação/Atualização)
model CourseModality {
  id                Int                     @id @default(autoincrement())
  code              String                  @unique // Código gerado automaticamente
  name              String
  description       String?
  courseToModality  CourseToModality[]      // Relação com cursos (muitos-para-muitos)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  couponConfigurations CouponConfiguration[] // Relação com configurações de cupom
  transactionCourses TransactionCourse[]    // Relação com cursos em transações
}

// Tabela de domínio para Curso
model Course {
  id                Int                  @id @default(autoincrement())
  code              String               @unique // Código gerado automaticamente
  name              String
  description       String?
  courseToModality  CourseToModality[]   // Relação com modalidades (muitos-para-muitos)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  couponConfigurations CouponConfiguration[] // Relação com configurações de cupom
  transactionCourses TransactionCourse[] // Relação com cursos em transações
}

// Tabela de junção para relacionamento muitos-para-muitos entre cursos e modalidades
model CourseToModality {
  course          Course          @relation(fields: [courseId], references: [id])
  courseId        Int
  courseModality  CourseModality  @relation(fields: [courseModalityId], references: [id])
  courseModalityId Int

  @@id([courseId, courseModalityId])
}

// Modelo de cupom de afiliado
model Coupon {
  id            Int                     @id @default(autoincrement())
  code          String                  @unique // Código único para o cupom
  customName    String?                 // Nome personalizado do cupom
  userId        Int?                    // Relação com o usuário afiliado ou vendedor (agora opcional)
  user          User?                   @relation(fields: [userId], references: [id])
  active        Boolean                 @default(true)
  applicationMode CouponApplicationMode
  expirationDate DateTime?              // Data de validade do cupom
  usageLimit    Int?                    // Limite de uso (null = ilimitado)
  usageCount    Int                     @default(0) // Contador de uso atual
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  configurations CouponConfiguration[]  // Configurações do cupom
  transactions  Transaction[]           // Relação com transações
}

// Configurações do cupom (modo geral ou específico)
model CouponConfiguration {
  id              Int              @id @default(autoincrement())
  couponId        Int
  coupon          Coupon           @relation(fields: [couponId], references: [id])
  courseId        Int?             // Nullable para o modo GENERAL
  course          Course?          @relation(fields: [courseId], references: [id])
  courseModalityId Int?
  courseModality  CourseModality?  @relation(fields: [courseModalityId], references: [id])
  discountValue   Float?           // Valor de desconto (null se for percentual)
  discountPercent Float?           // Percentual de desconto (null se for valor fixo)
  commissionValue Float?           // Valor da comissão (null se for percentual)
  commissionPercent Float?         // Percentual da comissão (null se for valor fixo)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Modelo de aluno/cliente
model Student {
  id                        Int             @id @default(autoincrement())
  registrationDate          DateTime        @default(now())
  fullName                  String
  ddd                       String          @db.VarChar(3)
  phone                     String
  email                     String?
  birthDate                 DateTime?
  cpf                       String          @unique
  cnhNumber                 String?
  cnhType                   String?
  renach                    String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  createdBy                 User            @relation(fields: [userId], references: [id])
  userId                    Int
  paymentLinks              PaymentLink[]
  transactions              Transaction[]   // Relação com transações do aluno
}

// Modelo para armazenar os links de pagamento da Yapay
model PaymentLink {
  id                       Int      @id @default(autoincrement())
  yapayId                  Int
  orderNumber              String   @unique
  code                     String
  value                    String
  description              String
  maxSplitTransaction      Int
  availablePaymentMethods  String
  paymentLink              String
  status                   Int     // 0 = inativo, 1 = pendente, 2 = pago, 3 = cancelado
  studentId                Int
  student                  Student  @relation(fields: [studentId], references: [id])
  transactionId            Int?    // Campo opcional que referencia a transação
  transaction              Transaction? @relation(fields: [transactionId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

// Modelo para transações (vendas) - cada venda pode conter múltiplos cursos
model Transaction {
  id                Int                 @id @default(autoincrement())
  studentId         Int
  student           Student             @relation(fields: [studentId], references: [id])
  totalValue        Float               // Valor total da transação
  paymentType       String              // Tipo de pagamento
  installments      Int                 @default(1)
  paymentStatus     String              @default("Pendente")
  paymentDate       DateTime?
  paymentForecastDate DateTime?
  createdById       Int
  createdBy         User                @relation(fields: [createdById], references: [id])
  couponId          Int?
  coupon            Coupon?             @relation(fields: [couponId], references: [id])
  discountAmount    Float?
  courses           TransactionCourse[] // Cursos incluídos na transação
  paymentLinks      PaymentLink[]       // Links de pagamento
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Tabela de junção entre transação e cursos
model TransactionCourse {
  id                Int             @id @default(autoincrement())
  transactionId     Int
  transaction       Transaction     @relation(fields: [transactionId], references: [id])
  courseId          Int
  course            Course          @relation(fields: [courseId], references: [id])
  courseModalityId  Int
  courseModality    CourseModality  @relation(fields: [courseModalityId], references: [id])
  
  @@unique([transactionId, courseId, courseModalityId])
}

// Outros modelos que poderão ser adicionados no futuro:
// - PaymentLink
// - PaymentTransaction 